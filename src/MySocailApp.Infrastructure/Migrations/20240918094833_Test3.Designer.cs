// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MySocailApp.Infrastructure.DbContexts;

#nullable disable

namespace MySocailApp.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240918094833_Test3")]
    partial class Test3
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "user",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = 2,
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MySocailApp.Application.Queries.MessageAggregate.MessageResponseDto", b =>
                {
                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ConversationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<bool>("IsEdited")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOwner")
                        .HasColumnType("bit");

                    b.Property<int>("NumberOfImages")
                        .HasColumnType("int");

                    b.Property<int>("ReceiverId")
                        .HasColumnType("int");

                    b.Property<int>("SenderId")
                        .HasColumnType("int");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("MessageResponseDtos");
                });

            modelBuilder.Entity("MySocailApp.Domain.AccountAggregate.Entities.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsThirdPartyAuthenticated")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("MySocailApp.Domain.AppUserAggregate.Entities.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("HasImage")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("AppUsers");
                });

            modelBuilder.Entity("MySocailApp.Domain.AppUserAggregate.Entities.Follow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("FollowedId")
                        .HasColumnType("int");

                    b.Property<int>("FollowerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("FollowedId");

                    b.HasIndex("FollowerId");

                    b.ToTable("Follows");
                });

            modelBuilder.Entity("MySocailApp.Domain.AppUserAggregate.Entities.UserFollowNotification", b =>
                {
                    b.Property<int>("AppUserId")
                        .HasColumnType("int");

                    b.Property<int>("FollowerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("AppUserId", "FollowerId");

                    b.ToTable("UserFollowNotification");
                });

            modelBuilder.Entity("MySocailApp.Domain.AppUserAggregate.Entities.UserSearch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("SearchedId")
                        .HasColumnType("int");

                    b.Property<int>("SearcherId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("SearchedId");

                    b.HasIndex("SearcherId");

                    b.ToTable("UserSearchs");
                });

            modelBuilder.Entity("MySocailApp.Domain.CommentAggregate.Entities.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AppUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsEdited")
                        .HasColumnType("bit");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<int?>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int?>("RepliedId")
                        .HasColumnType("int");

                    b.Property<int?>("SolutionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("ParentId");

                    b.HasIndex("QuestionId");

                    b.HasIndex("RepliedId");

                    b.HasIndex("SolutionId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("MySocailApp.Domain.CommentAggregate.Entities.CommentLikeNotification", b =>
                {
                    b.Property<int>("CommentId")
                        .HasColumnType("int");

                    b.Property<int>("AppUserId")
                        .HasColumnType("int");

                    b.HasKey("CommentId", "AppUserId");

                    b.ToTable("CommentLikeNotification");
                });

            modelBuilder.Entity("MySocailApp.Domain.CommentAggregate.Entities.CommentUserLike", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AppUserId")
                        .HasColumnType("int");

                    b.Property<int>("CommentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("CommentId");

                    b.ToTable("CommentUserLikes");
                });

            modelBuilder.Entity("MySocailApp.Domain.CommentAggregate.Entities.CommentUserTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AppUserId")
                        .HasColumnType("int");

                    b.Property<int>("CommentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("CommentId");

                    b.ToTable("CommentUserTag");
                });

            modelBuilder.Entity("MySocailApp.Domain.ExamAggregate.Entitities.Exam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Exams");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 9, 18, 9, 48, 32, 936, DateTimeKind.Utc).AddTicks(3891),
                            FullName = "Temel Yeterlilik Testi",
                            ShortName = "TYT"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 9, 18, 9, 48, 32, 936, DateTimeKind.Utc).AddTicks(3895),
                            FullName = "Alan Yeterlilik Testi",
                            ShortName = "AYT"
                        });
                });

            modelBuilder.Entity("MySocailApp.Domain.MessageAggregate.Entities.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsEdited")
                        .HasColumnType("bit");

                    b.Property<int>("ReceiverId")
                        .HasColumnType("int");

                    b.Property<int>("SenderId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("MySocailApp.Domain.MessageAggregate.Entities.MessageImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BlobName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<float>("Height")
                        .HasColumnType("real");

                    b.Property<int>("MessageId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<float>("Width")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("MessageId");

                    b.ToTable("MessageImage");
                });

            modelBuilder.Entity("MySocailApp.Domain.MessageAggregate.Entities.MessageUserReceive", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AppUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("MessageId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MessageId");

                    b.ToTable("MessageUserReceive");
                });

            modelBuilder.Entity("MySocailApp.Domain.MessageAggregate.Entities.MessageUserRemove", b =>
                {
                    b.Property<int>("MessageId")
                        .HasColumnType("int");

                    b.Property<int>("AppUserId")
                        .HasColumnType("int");

                    b.HasKey("MessageId", "AppUserId");

                    b.ToTable("MessageUserRemove");
                });

            modelBuilder.Entity("MySocailApp.Domain.MessageAggregate.Entities.MessageUserView", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AppUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("MessageId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MessageId");

                    b.ToTable("MessageUserView");
                });

            modelBuilder.Entity("MySocailApp.Domain.NotificationAggregate.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CommentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsViewed")
                        .HasColumnType("bit");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<int?>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int?>("RepliedId")
                        .HasColumnType("int");

                    b.Property<int?>("SolutionId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("MySocailApp.Domain.NotificationConnectionAggregate.Entities.NotificationConnection", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("ConnectionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsConnected")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("NotificationConnections");
                });

            modelBuilder.Entity("MySocailApp.Domain.QuestionAggregate.Entities.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AppUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ExamId")
                        .HasColumnType("int");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("ExamId");

                    b.HasIndex("SubjectId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("MySocailApp.Domain.QuestionAggregate.Entities.QuestionImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BlobName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<float>("Height")
                        .HasColumnType("real");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<float>("Width")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuestionImage");
                });

            modelBuilder.Entity("MySocailApp.Domain.QuestionAggregate.Entities.QuestionLikeNotification", b =>
                {
                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("AppUserId")
                        .HasColumnType("int");

                    b.HasKey("QuestionId", "AppUserId");

                    b.ToTable("QuestionLikeNotification");
                });

            modelBuilder.Entity("MySocailApp.Domain.QuestionAggregate.Entities.QuestionTopic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("TopicId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("TopicId");

                    b.ToTable("QuestionTopic");
                });

            modelBuilder.Entity("MySocailApp.Domain.QuestionAggregate.Entities.QuestionUserLike", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AppUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuestionUserLikes");
                });

            modelBuilder.Entity("MySocailApp.Domain.QuestionAggregate.Entities.QuestionUserSave", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AppUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuestionUserSaves");
                });

            modelBuilder.Entity("MySocailApp.Domain.SolutionAggregate.Entities.Solution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AppUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("QuestionId");

                    b.ToTable("Solutions");
                });

            modelBuilder.Entity("MySocailApp.Domain.SolutionAggregate.Entities.SolutionImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BlobName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<float>("Height")
                        .HasColumnType("real");

                    b.Property<int>("SolutionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<float>("Width")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("SolutionId");

                    b.ToTable("SolutionImage");
                });

            modelBuilder.Entity("MySocailApp.Domain.SolutionAggregate.Entities.SolutionUserVote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AppUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("SolutionId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("SolutionId");

                    b.ToTable("SolutionUserVotes");
                });

            modelBuilder.Entity("MySocailApp.Domain.SolutionAggregate.Entities.SolutionVoteNotification", b =>
                {
                    b.Property<int>("SolutionId")
                        .HasColumnType("int");

                    b.Property<int>("AppUserId")
                        .HasColumnType("int");

                    b.HasKey("SolutionId", "AppUserId");

                    b.ToTable("SolutionVoteNotification");
                });

            modelBuilder.Entity("MySocailApp.Domain.SubjectAggregate.Entities.Subject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ExamId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ExamId");

                    b.ToTable("Subjects");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 9, 18, 9, 48, 32, 936, DateTimeKind.Utc).AddTicks(4876),
                            ExamId = 1,
                            Name = "TYT - Türkçe"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 9, 18, 9, 48, 32, 936, DateTimeKind.Utc).AddTicks(4879),
                            ExamId = 1,
                            Name = "TYT - Tarih"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 9, 18, 9, 48, 32, 936, DateTimeKind.Utc).AddTicks(4880),
                            ExamId = 1,
                            Name = "TYT - Coğrafya"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 9, 18, 9, 48, 32, 936, DateTimeKind.Utc).AddTicks(4880),
                            ExamId = 1,
                            Name = "TYT - Felsefe"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2024, 9, 18, 9, 48, 32, 936, DateTimeKind.Utc).AddTicks(4880),
                            ExamId = 1,
                            Name = "TYT - Din Kültürü ve Ahlâk Bilgisi"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2024, 9, 18, 9, 48, 32, 936, DateTimeKind.Utc).AddTicks(4881),
                            ExamId = 1,
                            Name = "TYT - Matematik"
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2024, 9, 18, 9, 48, 32, 936, DateTimeKind.Utc).AddTicks(4881),
                            ExamId = 1,
                            Name = "TYT - Geometri"
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2024, 9, 18, 9, 48, 32, 936, DateTimeKind.Utc).AddTicks(4882),
                            ExamId = 1,
                            Name = "TYT - Fizik"
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2024, 9, 18, 9, 48, 32, 936, DateTimeKind.Utc).AddTicks(4882),
                            ExamId = 1,
                            Name = "TYT - Kimya"
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2024, 9, 18, 9, 48, 32, 936, DateTimeKind.Utc).AddTicks(4883),
                            ExamId = 1,
                            Name = "TYT - Biyoloji"
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(2024, 9, 18, 9, 48, 32, 936, DateTimeKind.Utc).AddTicks(4883),
                            ExamId = 2,
                            Name = "AYT - Matematik"
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTime(2024, 9, 18, 9, 48, 32, 936, DateTimeKind.Utc).AddTicks(4884),
                            ExamId = 2,
                            Name = "AYT - Geometri"
                        },
                        new
                        {
                            Id = 13,
                            CreatedAt = new DateTime(2024, 9, 18, 9, 48, 32, 936, DateTimeKind.Utc).AddTicks(4884),
                            ExamId = 2,
                            Name = "AYT - Fizik"
                        },
                        new
                        {
                            Id = 14,
                            CreatedAt = new DateTime(2024, 9, 18, 9, 48, 32, 936, DateTimeKind.Utc).AddTicks(4884),
                            ExamId = 2,
                            Name = "AYT - Kimya"
                        },
                        new
                        {
                            Id = 15,
                            CreatedAt = new DateTime(2024, 9, 18, 9, 48, 32, 936, DateTimeKind.Utc).AddTicks(4885),
                            ExamId = 2,
                            Name = "AYT - Biyoloji "
                        },
                        new
                        {
                            Id = 16,
                            CreatedAt = new DateTime(2024, 9, 18, 9, 48, 32, 936, DateTimeKind.Utc).AddTicks(4888),
                            ExamId = 2,
                            Name = "AYT - Coğrafya "
                        },
                        new
                        {
                            Id = 17,
                            CreatedAt = new DateTime(2024, 9, 18, 9, 48, 32, 936, DateTimeKind.Utc).AddTicks(4924),
                            ExamId = 2,
                            Name = "AYT - Tarih "
                        },
                        new
                        {
                            Id = 18,
                            CreatedAt = new DateTime(2024, 9, 18, 9, 48, 32, 936, DateTimeKind.Utc).AddTicks(4925),
                            ExamId = 2,
                            Name = "AYT - Türk Dili ve Edebiyatı"
                        },
                        new
                        {
                            Id = 19,
                            CreatedAt = new DateTime(2024, 9, 18, 9, 48, 32, 936, DateTimeKind.Utc).AddTicks(4925),
                            ExamId = 2,
                            Name = "AYT - Din Kültürü ve Ahlâk Bilgisi"
                        },
                        new
                        {
                            Id = 20,
                            CreatedAt = new DateTime(2024, 9, 18, 9, 48, 32, 936, DateTimeKind.Utc).AddTicks(4925),
                            ExamId = 2,
                            Name = "AYT - Felsefe"
                        },
                        new
                        {
                            Id = 21,
                            CreatedAt = new DateTime(2024, 9, 18, 9, 48, 32, 936, DateTimeKind.Utc).AddTicks(4926),
                            ExamId = 2,
                            Name = "AYT - Psikoloji"
                        },
                        new
                        {
                            Id = 22,
                            CreatedAt = new DateTime(2024, 9, 18, 9, 48, 32, 936, DateTimeKind.Utc).AddTicks(4926),
                            ExamId = 2,
                            Name = "AYT - Sosyoloji"
                        },
                        new
                        {
                            Id = 23,
                            CreatedAt = new DateTime(2024, 9, 18, 9, 48, 32, 936, DateTimeKind.Utc).AddTicks(4927),
                            ExamId = 2,
                            Name = "AYT - Mantık"
                        });
                });

            modelBuilder.Entity("MySocailApp.Domain.TopicAggregate.Entities.Topic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId");

                    b.ToTable("Topics");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 9, 18, 9, 48, 32, 936, DateTimeKind.Utc).AddTicks(5025),
                            Name = "Sözcükte Anlam",
                            SubjectId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 9, 18, 9, 48, 32, 936, DateTimeKind.Utc).AddTicks(5028),
                            Name = "Söz Yorumu",
                            SubjectId = 1
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 9, 18, 9, 48, 32, 936, DateTimeKind.Utc).AddTicks(5028),
                            Name = "Deyim ve Atasözü",
                            SubjectId = 1
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 9, 18, 9, 48, 32, 936, DateTimeKind.Utc).AddTicks(5029),
                            Name = "Cümlede Anlam",
                            SubjectId = 1
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2024, 9, 18, 9, 48, 32, 936, DateTimeKind.Utc).AddTicks(5029),
                            Name = "Paragraf",
                            SubjectId = 1
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2024, 9, 18, 9, 48, 32, 936, DateTimeKind.Utc).AddTicks(5030),
                            Name = "Paragrafta Anlatım Teknikleri",
                            SubjectId = 1
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2024, 9, 18, 9, 48, 32, 936, DateTimeKind.Utc).AddTicks(5030),
                            Name = "Paragrafta Düşünceyi Geliştirme Yolları",
                            SubjectId = 1
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2024, 9, 18, 9, 48, 32, 936, DateTimeKind.Utc).AddTicks(5031),
                            Name = "Paragrafta Yapı",
                            SubjectId = 1
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2024, 9, 18, 9, 48, 32, 936, DateTimeKind.Utc).AddTicks(5031),
                            Name = "Paragrafta Konu-Ana Düşünce",
                            SubjectId = 1
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2024, 9, 18, 9, 48, 32, 936, DateTimeKind.Utc).AddTicks(5032),
                            Name = "Paragrafta Yardımcı Düşünce",
                            SubjectId = 1
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(2024, 9, 18, 9, 48, 32, 936, DateTimeKind.Utc).AddTicks(5032),
                            Name = "Ses Bilgisi",
                            SubjectId = 1
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTime(2024, 9, 18, 9, 48, 32, 936, DateTimeKind.Utc).AddTicks(5033),
                            Name = "Yazım Kuralları",
                            SubjectId = 1
                        },
                        new
                        {
                            Id = 13,
                            CreatedAt = new DateTime(2024, 9, 18, 9, 48, 32, 936, DateTimeKind.Utc).AddTicks(5033),
                            Name = "Noktalama İşaretleri",
                            SubjectId = 1
                        },
                        new
                        {
                            Id = 14,
                            CreatedAt = new DateTime(2024, 9, 18, 9, 48, 32, 936, DateTimeKind.Utc).AddTicks(5033),
                            Name = "Sözcükte Yapı/Ekler",
                            SubjectId = 1
                        },
                        new
                        {
                            Id = 15,
                            CreatedAt = new DateTime(2024, 9, 18, 9, 48, 32, 936, DateTimeKind.Utc).AddTicks(5034),
                            Name = "Sözcük Türleri",
                            SubjectId = 1
                        },
                        new
                        {
                            Id = 16,
                            CreatedAt = new DateTime(2024, 9, 18, 9, 48, 32, 936, DateTimeKind.Utc).AddTicks(5034),
                            Name = "İsimler",
                            SubjectId = 1
                        },
                        new
                        {
                            Id = 17,
                            CreatedAt = new DateTime(2024, 9, 18, 9, 48, 32, 936, DateTimeKind.Utc).AddTicks(5035),
                            Name = "Zamirler",
                            SubjectId = 1
                        },
                        new
                        {
                            Id = 18,
                            CreatedAt = new DateTime(2024, 9, 18, 9, 48, 32, 936, DateTimeKind.Utc).AddTicks(5035),
                            Name = "Sıfatlar",
                            SubjectId = 1
                        },
                        new
                        {
                            Id = 19,
                            CreatedAt = new DateTime(2024, 9, 18, 9, 48, 32, 936, DateTimeKind.Utc).AddTicks(5036),
                            Name = "Zarflar",
                            SubjectId = 1
                        },
                        new
                        {
                            Id = 20,
                            CreatedAt = new DateTime(2024, 9, 18, 9, 48, 32, 936, DateTimeKind.Utc).AddTicks(5036),
                            Name = "Edat",
                            SubjectId = 1
                        },
                        new
                        {
                            Id = 21,
                            CreatedAt = new DateTime(2024, 9, 18, 9, 48, 32, 936, DateTimeKind.Utc).AddTicks(5037),
                            Name = "Bağlaç",
                            SubjectId = 1
                        },
                        new
                        {
                            Id = 22,
                            CreatedAt = new DateTime(2024, 9, 18, 9, 48, 32, 936, DateTimeKind.Utc).AddTicks(5037),
                            Name = "Ünlem",
                            SubjectId = 1
                        },
                        new
                        {
                            Id = 23,
                            CreatedAt = new DateTime(2024, 9, 18, 9, 48, 32, 936, DateTimeKind.Utc).AddTicks(5037),
                            Name = "Edat - Bağlaç - Ünlem",
                            SubjectId = 1
                        },
                        new
                        {
                            Id = 24,
                            CreatedAt = new DateTime(2024, 9, 18, 9, 48, 32, 936, DateTimeKind.Utc).AddTicks(5038),
                            Name = "Fiiller",
                            SubjectId = 1
                        },
                        new
                        {
                            Id = 25,
                            CreatedAt = new DateTime(2024, 9, 18, 9, 48, 32, 936, DateTimeKind.Utc).AddTicks(5038),
                            Name = "Fiilde Anlam (Kip-Kişi-Yapı)",
                            SubjectId = 1
                        },
                        new
                        {
                            Id = 26,
                            CreatedAt = new DateTime(2024, 9, 18, 9, 48, 32, 936, DateTimeKind.Utc).AddTicks(5039),
                            Name = "Ek Fiil",
                            SubjectId = 1
                        },
                        new
                        {
                            Id = 27,
                            CreatedAt = new DateTime(2024, 9, 18, 9, 48, 32, 936, DateTimeKind.Utc).AddTicks(5039),
                            Name = "Fiilimsi",
                            SubjectId = 1
                        },
                        new
                        {
                            Id = 28,
                            CreatedAt = new DateTime(2024, 9, 18, 9, 48, 32, 936, DateTimeKind.Utc).AddTicks(5040),
                            Name = "Fiilde Çatı",
                            SubjectId = 1
                        },
                        new
                        {
                            Id = 29,
                            CreatedAt = new DateTime(2024, 9, 18, 9, 48, 32, 936, DateTimeKind.Utc).AddTicks(5040),
                            Name = "Sözcük Grupları",
                            SubjectId = 1
                        },
                        new
                        {
                            Id = 30,
                            CreatedAt = new DateTime(2024, 9, 18, 9, 48, 32, 936, DateTimeKind.Utc).AddTicks(5041),
                            Name = "Cümlenin Ögeleri",
                            SubjectId = 1
                        },
                        new
                        {
                            Id = 31,
                            CreatedAt = new DateTime(2024, 9, 18, 9, 48, 32, 936, DateTimeKind.Utc).AddTicks(5041),
                            Name = "Cümle Türleri",
                            SubjectId = 1
                        },
                        new
                        {
                            Id = 32,
                            CreatedAt = new DateTime(2024, 9, 18, 9, 48, 32, 936, DateTimeKind.Utc).AddTicks(5041),
                            Name = "Anlatım Bozukluğu",
                            SubjectId = 1
                        });
                });

            modelBuilder.Entity("MySocailApp.Domain.UserConnectionAggregate.Entities.UserConnection", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("ConnectionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsConnected")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("UserConnections");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("MySocailApp.Domain.AccountAggregate.Entities.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("MySocailApp.Domain.AccountAggregate.Entities.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MySocailApp.Domain.AccountAggregate.Entities.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("MySocailApp.Domain.AccountAggregate.Entities.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MySocailApp.Domain.AccountAggregate.Entities.Account", b =>
                {
                    b.OwnsOne("MySocailApp.Domain.AccountAggregate.ValueObjects.EmailConfirmationToken", "EmailConfirmationToken", b1 =>
                        {
                            b1.Property<int>("AccountId")
                                .HasColumnType("int");

                            b1.Property<DateTime>("ExpirationAt")
                                .HasColumnType("datetime2");

                            b1.Property<int>("NumberOfFailedAttemps")
                                .HasColumnType("int");

                            b1.Property<string>("Token")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("AccountId");

                            b1.ToTable("AspNetUsers");

                            b1.WithOwner()
                                .HasForeignKey("AccountId");
                        });

                    b.Navigation("EmailConfirmationToken");
                });

            modelBuilder.Entity("MySocailApp.Domain.AppUserAggregate.Entities.AppUser", b =>
                {
                    b.HasOne("MySocailApp.Domain.AccountAggregate.Entities.Account", "Account")
                        .WithOne("AppUser")
                        .HasForeignKey("MySocailApp.Domain.AppUserAggregate.Entities.AppUser", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("MySocailApp.Domain.AppUserAggregate.ValueObjects.Biography", "Biography", b1 =>
                        {
                            b1.Property<int>("AppUserId")
                                .HasColumnType("int");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("AppUserId");

                            b1.ToTable("AppUsers");

                            b1.WithOwner()
                                .HasForeignKey("AppUserId");
                        });

                    b.OwnsOne("MySocailApp.Domain.AppUserAggregate.ValueObjects.ProfileImage", "Image", b1 =>
                        {
                            b1.Property<int>("AppUserId")
                                .HasColumnType("int");

                            b1.Property<string>("BlobName")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("CreatedAt")
                                .HasColumnType("datetime2");

                            b1.HasKey("AppUserId");

                            b1.ToTable("AppUsers");

                            b1.WithOwner()
                                .HasForeignKey("AppUserId");
                        });

                    b.Navigation("Account");

                    b.Navigation("Biography")
                        .IsRequired();

                    b.Navigation("Image");
                });

            modelBuilder.Entity("MySocailApp.Domain.AppUserAggregate.Entities.Follow", b =>
                {
                    b.HasOne("MySocailApp.Domain.AppUserAggregate.Entities.AppUser", "Followed")
                        .WithMany("Followers")
                        .HasForeignKey("FollowedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MySocailApp.Domain.AppUserAggregate.Entities.AppUser", "Follower")
                        .WithMany("Followeds")
                        .HasForeignKey("FollowerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Followed");

                    b.Navigation("Follower");
                });

            modelBuilder.Entity("MySocailApp.Domain.AppUserAggregate.Entities.UserFollowNotification", b =>
                {
                    b.HasOne("MySocailApp.Domain.AppUserAggregate.Entities.AppUser", null)
                        .WithMany("UserFollowNotifications")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MySocailApp.Domain.AppUserAggregate.Entities.UserSearch", b =>
                {
                    b.HasOne("MySocailApp.Domain.AppUserAggregate.Entities.AppUser", "Searched")
                        .WithMany("Searchers")
                        .HasForeignKey("SearchedId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MySocailApp.Domain.AppUserAggregate.Entities.AppUser", "Searcher")
                        .WithMany("Searcheds")
                        .HasForeignKey("SearcherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Searched");

                    b.Navigation("Searcher");
                });

            modelBuilder.Entity("MySocailApp.Domain.CommentAggregate.Entities.Comment", b =>
                {
                    b.HasOne("MySocailApp.Domain.AppUserAggregate.Entities.AppUser", "AppUser")
                        .WithMany("Comments")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MySocailApp.Domain.CommentAggregate.Entities.Comment", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("MySocailApp.Domain.QuestionAggregate.Entities.Question", "Question")
                        .WithMany("Comments")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("MySocailApp.Domain.CommentAggregate.Entities.Comment", "Replied")
                        .WithMany("Replies")
                        .HasForeignKey("RepliedId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("MySocailApp.Domain.SolutionAggregate.Entities.Solution", "Solution")
                        .WithMany("Comments")
                        .HasForeignKey("SolutionId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.OwnsOne("MySocailApp.Domain.CommentAggregate.ValueObjects.CommentContent", "Content", b1 =>
                        {
                            b1.Property<int>("CommentId")
                                .HasColumnType("int");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("CommentId");

                            b1.ToTable("Comments");

                            b1.WithOwner()
                                .HasForeignKey("CommentId");
                        });

                    b.Navigation("AppUser");

                    b.Navigation("Content")
                        .IsRequired();

                    b.Navigation("Parent");

                    b.Navigation("Question");

                    b.Navigation("Replied");

                    b.Navigation("Solution");
                });

            modelBuilder.Entity("MySocailApp.Domain.CommentAggregate.Entities.CommentLikeNotification", b =>
                {
                    b.HasOne("MySocailApp.Domain.CommentAggregate.Entities.Comment", "Comment")
                        .WithMany("LikeNotifications")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Comment");
                });

            modelBuilder.Entity("MySocailApp.Domain.CommentAggregate.Entities.CommentUserLike", b =>
                {
                    b.HasOne("MySocailApp.Domain.AppUserAggregate.Entities.AppUser", "AppUser")
                        .WithMany("CommentsLiked")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MySocailApp.Domain.CommentAggregate.Entities.Comment", "Comment")
                        .WithMany("Likes")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Comment");
                });

            modelBuilder.Entity("MySocailApp.Domain.CommentAggregate.Entities.CommentUserTag", b =>
                {
                    b.HasOne("MySocailApp.Domain.AppUserAggregate.Entities.AppUser", "AppUser")
                        .WithMany("CommentsTagged")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MySocailApp.Domain.CommentAggregate.Entities.Comment", "Comment")
                        .WithMany("Tags")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Comment");
                });

            modelBuilder.Entity("MySocailApp.Domain.MessageAggregate.Entities.Message", b =>
                {
                    b.HasOne("MySocailApp.Domain.AppUserAggregate.Entities.AppUser", "Receiver")
                        .WithMany("MessagesReceived")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MySocailApp.Domain.AppUserAggregate.Entities.AppUser", "Sender")
                        .WithMany("Messages")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("MySocailApp.Domain.MessageAggregate.Entities.MessageImage", b =>
                {
                    b.HasOne("MySocailApp.Domain.MessageAggregate.Entities.Message", "Message")
                        .WithMany("Images")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Message");
                });

            modelBuilder.Entity("MySocailApp.Domain.MessageAggregate.Entities.MessageUserReceive", b =>
                {
                    b.HasOne("MySocailApp.Domain.MessageAggregate.Entities.Message", "Message")
                        .WithMany("Receivers")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Message");
                });

            modelBuilder.Entity("MySocailApp.Domain.MessageAggregate.Entities.MessageUserRemove", b =>
                {
                    b.HasOne("MySocailApp.Domain.MessageAggregate.Entities.Message", "Message")
                        .WithMany("Removers")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Message");
                });

            modelBuilder.Entity("MySocailApp.Domain.MessageAggregate.Entities.MessageUserView", b =>
                {
                    b.HasOne("MySocailApp.Domain.MessageAggregate.Entities.Message", "Message")
                        .WithMany("Viewers")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Message");
                });

            modelBuilder.Entity("MySocailApp.Domain.NotificationConnectionAggregate.Entities.NotificationConnection", b =>
                {
                    b.HasOne("MySocailApp.Domain.AppUserAggregate.Entities.AppUser", "AppUser")
                        .WithOne("NotificationConnection")
                        .HasForeignKey("MySocailApp.Domain.NotificationConnectionAggregate.Entities.NotificationConnection", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("MySocailApp.Domain.QuestionAggregate.Entities.Question", b =>
                {
                    b.HasOne("MySocailApp.Domain.AppUserAggregate.Entities.AppUser", "AppUser")
                        .WithMany("Questions")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MySocailApp.Domain.ExamAggregate.Entitities.Exam", "Exam")
                        .WithMany("Quesitons")
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MySocailApp.Domain.SubjectAggregate.Entities.Subject", "Subject")
                        .WithMany("Quesitons")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.OwnsOne("MySocailApp.Domain.QuestionAggregate.ValueObjects.QuestionContent", "Content", b1 =>
                        {
                            b1.Property<int>("QuestionId")
                                .HasColumnType("int");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("QuestionId");

                            b1.ToTable("Questions");

                            b1.WithOwner()
                                .HasForeignKey("QuestionId");
                        });

                    b.Navigation("AppUser");

                    b.Navigation("Content")
                        .IsRequired();

                    b.Navigation("Exam");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("MySocailApp.Domain.QuestionAggregate.Entities.QuestionImage", b =>
                {
                    b.HasOne("MySocailApp.Domain.QuestionAggregate.Entities.Question", "Question")
                        .WithMany("Images")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("MySocailApp.Domain.QuestionAggregate.Entities.QuestionLikeNotification", b =>
                {
                    b.HasOne("MySocailApp.Domain.QuestionAggregate.Entities.Question", "Question")
                        .WithMany("LikeNotifications")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("MySocailApp.Domain.QuestionAggregate.Entities.QuestionTopic", b =>
                {
                    b.HasOne("MySocailApp.Domain.QuestionAggregate.Entities.Question", "Question")
                        .WithMany("Topics")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MySocailApp.Domain.TopicAggregate.Entities.Topic", "Topic")
                        .WithMany("Questions")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("MySocailApp.Domain.QuestionAggregate.Entities.QuestionUserLike", b =>
                {
                    b.HasOne("MySocailApp.Domain.AppUserAggregate.Entities.AppUser", "AppUser")
                        .WithMany("QuestionsLiked")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MySocailApp.Domain.QuestionAggregate.Entities.Question", "Question")
                        .WithMany("Likes")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("MySocailApp.Domain.QuestionAggregate.Entities.QuestionUserSave", b =>
                {
                    b.HasOne("MySocailApp.Domain.QuestionAggregate.Entities.Question", "Question")
                        .WithMany("Saves")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("MySocailApp.Domain.SolutionAggregate.Entities.Solution", b =>
                {
                    b.HasOne("MySocailApp.Domain.AppUserAggregate.Entities.AppUser", "AppUser")
                        .WithMany("Solutions")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MySocailApp.Domain.QuestionAggregate.Entities.Question", "Question")
                        .WithMany("Solutions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("MySocailApp.Domain.SolutionAggregate.ValueObjects.SolutionContent", "Content", b1 =>
                        {
                            b1.Property<int>("SolutionId")
                                .HasColumnType("int");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("SolutionId");

                            b1.ToTable("Solutions");

                            b1.WithOwner()
                                .HasForeignKey("SolutionId");
                        });

                    b.Navigation("AppUser");

                    b.Navigation("Content");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("MySocailApp.Domain.SolutionAggregate.Entities.SolutionImage", b =>
                {
                    b.HasOne("MySocailApp.Domain.SolutionAggregate.Entities.Solution", "Solution")
                        .WithMany("Images")
                        .HasForeignKey("SolutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Solution");
                });

            modelBuilder.Entity("MySocailApp.Domain.SolutionAggregate.Entities.SolutionUserVote", b =>
                {
                    b.HasOne("MySocailApp.Domain.AppUserAggregate.Entities.AppUser", "AppUser")
                        .WithMany("Votes")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MySocailApp.Domain.SolutionAggregate.Entities.Solution", "Solution")
                        .WithMany("Votes")
                        .HasForeignKey("SolutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Solution");
                });

            modelBuilder.Entity("MySocailApp.Domain.SolutionAggregate.Entities.SolutionVoteNotification", b =>
                {
                    b.HasOne("MySocailApp.Domain.SolutionAggregate.Entities.Solution", "Solution")
                        .WithMany("VoteNotifications")
                        .HasForeignKey("SolutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Solution");
                });

            modelBuilder.Entity("MySocailApp.Domain.SubjectAggregate.Entities.Subject", b =>
                {
                    b.HasOne("MySocailApp.Domain.ExamAggregate.Entitities.Exam", "Exam")
                        .WithMany("Subjects")
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exam");
                });

            modelBuilder.Entity("MySocailApp.Domain.TopicAggregate.Entities.Topic", b =>
                {
                    b.HasOne("MySocailApp.Domain.SubjectAggregate.Entities.Subject", "Subject")
                        .WithMany("Topics")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("MySocailApp.Domain.UserConnectionAggregate.Entities.UserConnection", b =>
                {
                    b.HasOne("MySocailApp.Domain.AppUserAggregate.Entities.AppUser", "AppUser")
                        .WithOne("UserConnection")
                        .HasForeignKey("MySocailApp.Domain.UserConnectionAggregate.Entities.UserConnection", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("MySocailApp.Domain.AccountAggregate.Entities.Account", b =>
                {
                    b.Navigation("AppUser")
                        .IsRequired();
                });

            modelBuilder.Entity("MySocailApp.Domain.AppUserAggregate.Entities.AppUser", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("CommentsLiked");

                    b.Navigation("CommentsTagged");

                    b.Navigation("Followeds");

                    b.Navigation("Followers");

                    b.Navigation("Messages");

                    b.Navigation("MessagesReceived");

                    b.Navigation("NotificationConnection")
                        .IsRequired();

                    b.Navigation("Questions");

                    b.Navigation("QuestionsLiked");

                    b.Navigation("Searcheds");

                    b.Navigation("Searchers");

                    b.Navigation("Solutions");

                    b.Navigation("UserConnection")
                        .IsRequired();

                    b.Navigation("UserFollowNotifications");

                    b.Navigation("Votes");
                });

            modelBuilder.Entity("MySocailApp.Domain.CommentAggregate.Entities.Comment", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("LikeNotifications");

                    b.Navigation("Likes");

                    b.Navigation("Replies");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("MySocailApp.Domain.ExamAggregate.Entitities.Exam", b =>
                {
                    b.Navigation("Quesitons");

                    b.Navigation("Subjects");
                });

            modelBuilder.Entity("MySocailApp.Domain.MessageAggregate.Entities.Message", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("Receivers");

                    b.Navigation("Removers");

                    b.Navigation("Viewers");
                });

            modelBuilder.Entity("MySocailApp.Domain.QuestionAggregate.Entities.Question", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Images");

                    b.Navigation("LikeNotifications");

                    b.Navigation("Likes");

                    b.Navigation("Saves");

                    b.Navigation("Solutions");

                    b.Navigation("Topics");
                });

            modelBuilder.Entity("MySocailApp.Domain.SolutionAggregate.Entities.Solution", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Images");

                    b.Navigation("VoteNotifications");

                    b.Navigation("Votes");
                });

            modelBuilder.Entity("MySocailApp.Domain.SubjectAggregate.Entities.Subject", b =>
                {
                    b.Navigation("Quesitons");

                    b.Navigation("Topics");
                });

            modelBuilder.Entity("MySocailApp.Domain.TopicAggregate.Entities.Topic", b =>
                {
                    b.Navigation("Questions");
                });
#pragma warning restore 612, 618
        }
    }
}
