// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MySocailApp.Infrastructure.DbContexts;

#nullable disable

namespace MySocailApp.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "user",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = 2,
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MySocailApp.Domain.AccountAggregate.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("RemovedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("MySocailApp.Domain.AppUserAggregate.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProfileVisibility")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RemovedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("AppUsers");
                });

            modelBuilder.Entity("MySocailApp.Domain.AppUserAggregate.AppUserImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AppUserId")
                        .HasColumnType("int");

                    b.Property<string>("BlobName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("RemovedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.ToTable("AppUserImage");
                });

            modelBuilder.Entity("MySocailApp.Domain.AppUserAggregate.Block", b =>
                {
                    b.Property<int>("BlockerId")
                        .HasColumnType("int");

                    b.Property<int>("BlockedId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("RemovedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("BlockerId", "BlockedId");

                    b.HasIndex("BlockedId");

                    b.ToTable("Block");
                });

            modelBuilder.Entity("MySocailApp.Domain.AppUserAggregate.Follow", b =>
                {
                    b.Property<int>("FollowerId")
                        .HasColumnType("int");

                    b.Property<int>("FollowedId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("RemovedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("FollowerId", "FollowedId");

                    b.HasIndex("FollowedId");

                    b.ToTable("Follow");
                });

            modelBuilder.Entity("MySocailApp.Domain.AppUserAggregate.FollowRequest", b =>
                {
                    b.Property<int>("RequesterId")
                        .HasColumnType("int");

                    b.Property<int>("RequestedId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("RemovedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("RequesterId", "RequestedId");

                    b.HasIndex("RequestedId");

                    b.ToTable("FollowRequest");
                });

            modelBuilder.Entity("MySocailApp.Domain.ExamAggregate.Exam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Exams");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 7, 16, 16, 29, 33, 778, DateTimeKind.Utc).AddTicks(3367),
                            FullName = "Temel Yeterlilik Testi",
                            ShortName = "TYT"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 7, 16, 16, 29, 33, 778, DateTimeKind.Utc).AddTicks(3369),
                            FullName = "Alan Yeterlilik Testi",
                            ShortName = "AYT"
                        });
                });

            modelBuilder.Entity("MySocailApp.Domain.QuestionAggregate.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AppUserId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ExamId")
                        .HasColumnType("int");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Updatedat")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("ExamId");

                    b.HasIndex("SubjectId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("MySocailApp.Domain.QuestionAggregate.QuestionImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BlobName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("QuestionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuestionImage");
                });

            modelBuilder.Entity("MySocailApp.Domain.QuestionAggregate.QuestionTopic", b =>
                {
                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("TopicId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("QuestionId", "TopicId");

                    b.HasIndex("TopicId");

                    b.ToTable("QuestionTopic");
                });

            modelBuilder.Entity("MySocailApp.Domain.QuestionAggregate.QuestionUserLike", b =>
                {
                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("AppUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatetAt")
                        .HasColumnType("datetime2");

                    b.HasKey("QuestionId", "AppUserId");

                    b.HasIndex("AppUserId");

                    b.ToTable("QuestionUserLike");
                });

            modelBuilder.Entity("MySocailApp.Domain.SubjectAggregate.Subject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ExamId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ExamId");

                    b.ToTable("Subjects");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 7, 16, 16, 29, 33, 778, DateTimeKind.Utc).AddTicks(4431),
                            ExamId = 1,
                            Name = "TYT - Türkçe"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 7, 16, 16, 29, 33, 778, DateTimeKind.Utc).AddTicks(4433),
                            ExamId = 1,
                            Name = "TYT - Tarih"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 7, 16, 16, 29, 33, 778, DateTimeKind.Utc).AddTicks(4434),
                            ExamId = 1,
                            Name = "TYT - Coğrafya"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 7, 16, 16, 29, 33, 778, DateTimeKind.Utc).AddTicks(4435),
                            ExamId = 1,
                            Name = "TYT - Felsefe"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2024, 7, 16, 16, 29, 33, 778, DateTimeKind.Utc).AddTicks(4435),
                            ExamId = 1,
                            Name = "TYT - Din Kültürü ve Ahlâk Bilgisi"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2024, 7, 16, 16, 29, 33, 778, DateTimeKind.Utc).AddTicks(4435),
                            ExamId = 1,
                            Name = "TYT - Matematik"
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2024, 7, 16, 16, 29, 33, 778, DateTimeKind.Utc).AddTicks(4436),
                            ExamId = 1,
                            Name = "TYT - Geometri"
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2024, 7, 16, 16, 29, 33, 778, DateTimeKind.Utc).AddTicks(4436),
                            ExamId = 1,
                            Name = "TYT - Fizik"
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2024, 7, 16, 16, 29, 33, 778, DateTimeKind.Utc).AddTicks(4437),
                            ExamId = 1,
                            Name = "TYT - Kimya"
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2024, 7, 16, 16, 29, 33, 778, DateTimeKind.Utc).AddTicks(4437),
                            ExamId = 1,
                            Name = "TYT - Biyoloji"
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(2024, 7, 16, 16, 29, 33, 778, DateTimeKind.Utc).AddTicks(4438),
                            ExamId = 2,
                            Name = "AYT - Matematik"
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTime(2024, 7, 16, 16, 29, 33, 778, DateTimeKind.Utc).AddTicks(4438),
                            ExamId = 2,
                            Name = "AYT - Geometri"
                        },
                        new
                        {
                            Id = 13,
                            CreatedAt = new DateTime(2024, 7, 16, 16, 29, 33, 778, DateTimeKind.Utc).AddTicks(4439),
                            ExamId = 2,
                            Name = "AYT - Fizik"
                        },
                        new
                        {
                            Id = 14,
                            CreatedAt = new DateTime(2024, 7, 16, 16, 29, 33, 778, DateTimeKind.Utc).AddTicks(4439),
                            ExamId = 2,
                            Name = "AYT - Kimya"
                        },
                        new
                        {
                            Id = 15,
                            CreatedAt = new DateTime(2024, 7, 16, 16, 29, 33, 778, DateTimeKind.Utc).AddTicks(4440),
                            ExamId = 2,
                            Name = "AYT - Biyoloji "
                        },
                        new
                        {
                            Id = 16,
                            CreatedAt = new DateTime(2024, 7, 16, 16, 29, 33, 778, DateTimeKind.Utc).AddTicks(4440),
                            ExamId = 2,
                            Name = "AYT - Coğrafya "
                        },
                        new
                        {
                            Id = 17,
                            CreatedAt = new DateTime(2024, 7, 16, 16, 29, 33, 778, DateTimeKind.Utc).AddTicks(4441),
                            ExamId = 2,
                            Name = "AYT - Tarih "
                        },
                        new
                        {
                            Id = 18,
                            CreatedAt = new DateTime(2024, 7, 16, 16, 29, 33, 778, DateTimeKind.Utc).AddTicks(4441),
                            ExamId = 2,
                            Name = "AYT - Türk Dili ve Edebiyatı"
                        },
                        new
                        {
                            Id = 19,
                            CreatedAt = new DateTime(2024, 7, 16, 16, 29, 33, 778, DateTimeKind.Utc).AddTicks(4442),
                            ExamId = 2,
                            Name = "AYT - Din Kültürü ve Ahlâk Bilgisi"
                        },
                        new
                        {
                            Id = 20,
                            CreatedAt = new DateTime(2024, 7, 16, 16, 29, 33, 778, DateTimeKind.Utc).AddTicks(4442),
                            ExamId = 2,
                            Name = "AYT - Felsefe"
                        },
                        new
                        {
                            Id = 21,
                            CreatedAt = new DateTime(2024, 7, 16, 16, 29, 33, 778, DateTimeKind.Utc).AddTicks(4443),
                            ExamId = 2,
                            Name = "AYT - Psikoloji"
                        },
                        new
                        {
                            Id = 22,
                            CreatedAt = new DateTime(2024, 7, 16, 16, 29, 33, 778, DateTimeKind.Utc).AddTicks(4443),
                            ExamId = 2,
                            Name = "AYT - Sosyoloji"
                        },
                        new
                        {
                            Id = 23,
                            CreatedAt = new DateTime(2024, 7, 16, 16, 29, 33, 778, DateTimeKind.Utc).AddTicks(4444),
                            ExamId = 2,
                            Name = "AYT - Mantık"
                        });
                });

            modelBuilder.Entity("MySocailApp.Domain.TopicAggregate.Topic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId");

                    b.ToTable("Topics");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 7, 16, 16, 29, 33, 778, DateTimeKind.Utc).AddTicks(4545),
                            Name = "Sözcükte Anlam",
                            SubjectId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 7, 16, 16, 29, 33, 778, DateTimeKind.Utc).AddTicks(4548),
                            Name = "Söz Yorumu",
                            SubjectId = 1
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 7, 16, 16, 29, 33, 778, DateTimeKind.Utc).AddTicks(4548),
                            Name = "Deyim ve Atasözü",
                            SubjectId = 1
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 7, 16, 16, 29, 33, 778, DateTimeKind.Utc).AddTicks(4549),
                            Name = "Cümlede Anlam",
                            SubjectId = 1
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2024, 7, 16, 16, 29, 33, 778, DateTimeKind.Utc).AddTicks(4570),
                            Name = "Paragraf",
                            SubjectId = 1
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2024, 7, 16, 16, 29, 33, 778, DateTimeKind.Utc).AddTicks(4571),
                            Name = "Paragrafta Anlatım Teknikleri",
                            SubjectId = 1
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2024, 7, 16, 16, 29, 33, 778, DateTimeKind.Utc).AddTicks(4571),
                            Name = "Paragrafta Düşünceyi Geliştirme Yolları",
                            SubjectId = 1
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2024, 7, 16, 16, 29, 33, 778, DateTimeKind.Utc).AddTicks(4572),
                            Name = "Paragrafta Yapı",
                            SubjectId = 1
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2024, 7, 16, 16, 29, 33, 778, DateTimeKind.Utc).AddTicks(4572),
                            Name = "Paragrafta Konu-Ana Düşünce",
                            SubjectId = 1
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2024, 7, 16, 16, 29, 33, 778, DateTimeKind.Utc).AddTicks(4573),
                            Name = "Paragrafta Yardımcı Düşünce",
                            SubjectId = 1
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(2024, 7, 16, 16, 29, 33, 778, DateTimeKind.Utc).AddTicks(4573),
                            Name = "Ses Bilgisi",
                            SubjectId = 1
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTime(2024, 7, 16, 16, 29, 33, 778, DateTimeKind.Utc).AddTicks(4574),
                            Name = "Yazım Kuralları",
                            SubjectId = 1
                        },
                        new
                        {
                            Id = 13,
                            CreatedAt = new DateTime(2024, 7, 16, 16, 29, 33, 778, DateTimeKind.Utc).AddTicks(4574),
                            Name = "Noktalama İşaretleri",
                            SubjectId = 1
                        },
                        new
                        {
                            Id = 14,
                            CreatedAt = new DateTime(2024, 7, 16, 16, 29, 33, 778, DateTimeKind.Utc).AddTicks(4575),
                            Name = "Sözcükte Yapı/Ekler",
                            SubjectId = 1
                        },
                        new
                        {
                            Id = 15,
                            CreatedAt = new DateTime(2024, 7, 16, 16, 29, 33, 778, DateTimeKind.Utc).AddTicks(4575),
                            Name = "Sözcük Türleri",
                            SubjectId = 1
                        },
                        new
                        {
                            Id = 16,
                            CreatedAt = new DateTime(2024, 7, 16, 16, 29, 33, 778, DateTimeKind.Utc).AddTicks(4576),
                            Name = "İsimler",
                            SubjectId = 1
                        },
                        new
                        {
                            Id = 17,
                            CreatedAt = new DateTime(2024, 7, 16, 16, 29, 33, 778, DateTimeKind.Utc).AddTicks(4576),
                            Name = "Zamirler",
                            SubjectId = 1
                        },
                        new
                        {
                            Id = 18,
                            CreatedAt = new DateTime(2024, 7, 16, 16, 29, 33, 778, DateTimeKind.Utc).AddTicks(4577),
                            Name = "Sıfatlar",
                            SubjectId = 1
                        },
                        new
                        {
                            Id = 19,
                            CreatedAt = new DateTime(2024, 7, 16, 16, 29, 33, 778, DateTimeKind.Utc).AddTicks(4577),
                            Name = "Zarflar",
                            SubjectId = 1
                        },
                        new
                        {
                            Id = 20,
                            CreatedAt = new DateTime(2024, 7, 16, 16, 29, 33, 778, DateTimeKind.Utc).AddTicks(4578),
                            Name = "Edat",
                            SubjectId = 1
                        },
                        new
                        {
                            Id = 21,
                            CreatedAt = new DateTime(2024, 7, 16, 16, 29, 33, 778, DateTimeKind.Utc).AddTicks(4578),
                            Name = "Bağlaç",
                            SubjectId = 1
                        },
                        new
                        {
                            Id = 22,
                            CreatedAt = new DateTime(2024, 7, 16, 16, 29, 33, 778, DateTimeKind.Utc).AddTicks(4578),
                            Name = "Ünlem",
                            SubjectId = 1
                        },
                        new
                        {
                            Id = 23,
                            CreatedAt = new DateTime(2024, 7, 16, 16, 29, 33, 778, DateTimeKind.Utc).AddTicks(4579),
                            Name = "Edat - Bağlaç - Ünlem",
                            SubjectId = 1
                        },
                        new
                        {
                            Id = 24,
                            CreatedAt = new DateTime(2024, 7, 16, 16, 29, 33, 778, DateTimeKind.Utc).AddTicks(4579),
                            Name = "Fiiller",
                            SubjectId = 1
                        },
                        new
                        {
                            Id = 25,
                            CreatedAt = new DateTime(2024, 7, 16, 16, 29, 33, 778, DateTimeKind.Utc).AddTicks(4580),
                            Name = "Fiilde Anlam (Kip-Kişi-Yapı)",
                            SubjectId = 1
                        },
                        new
                        {
                            Id = 26,
                            CreatedAt = new DateTime(2024, 7, 16, 16, 29, 33, 778, DateTimeKind.Utc).AddTicks(4580),
                            Name = "Ek Fiil",
                            SubjectId = 1
                        },
                        new
                        {
                            Id = 27,
                            CreatedAt = new DateTime(2024, 7, 16, 16, 29, 33, 778, DateTimeKind.Utc).AddTicks(4581),
                            Name = "Fiilimsi",
                            SubjectId = 1
                        },
                        new
                        {
                            Id = 28,
                            CreatedAt = new DateTime(2024, 7, 16, 16, 29, 33, 778, DateTimeKind.Utc).AddTicks(4581),
                            Name = "Fiilde Çatı",
                            SubjectId = 1
                        },
                        new
                        {
                            Id = 29,
                            CreatedAt = new DateTime(2024, 7, 16, 16, 29, 33, 778, DateTimeKind.Utc).AddTicks(4581),
                            Name = "Sözcük Grupları",
                            SubjectId = 1
                        },
                        new
                        {
                            Id = 30,
                            CreatedAt = new DateTime(2024, 7, 16, 16, 29, 33, 778, DateTimeKind.Utc).AddTicks(4582),
                            Name = "Cümlenin Ögeleri",
                            SubjectId = 1
                        },
                        new
                        {
                            Id = 31,
                            CreatedAt = new DateTime(2024, 7, 16, 16, 29, 33, 778, DateTimeKind.Utc).AddTicks(4582),
                            Name = "Cümle Türleri",
                            SubjectId = 1
                        },
                        new
                        {
                            Id = 32,
                            CreatedAt = new DateTime(2024, 7, 16, 16, 29, 33, 778, DateTimeKind.Utc).AddTicks(4583),
                            Name = "Anlatım Bozukluğu",
                            SubjectId = 1
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("MySocailApp.Domain.AccountAggregate.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("MySocailApp.Domain.AccountAggregate.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MySocailApp.Domain.AccountAggregate.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("MySocailApp.Domain.AccountAggregate.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MySocailApp.Domain.AccountAggregate.Account", b =>
                {
                    b.OwnsOne("MySocailApp.Domain.AccountAggregate.EmailConfirmationToken", "EmailConfirmationToken", b1 =>
                        {
                            b1.Property<int>("AccountId")
                                .HasColumnType("int");

                            b1.Property<DateTime>("ExpirationAt")
                                .HasColumnType("datetime2");

                            b1.Property<int>("NumberOfFailedAttemps")
                                .HasColumnType("int");

                            b1.Property<string>("Token")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("AccountId");

                            b1.ToTable("AspNetUsers");

                            b1.WithOwner()
                                .HasForeignKey("AccountId");
                        });

                    b.Navigation("EmailConfirmationToken")
                        .IsRequired();
                });

            modelBuilder.Entity("MySocailApp.Domain.AppUserAggregate.AppUser", b =>
                {
                    b.HasOne("MySocailApp.Domain.AccountAggregate.Account", "Account")
                        .WithOne("AppUser")
                        .HasForeignKey("MySocailApp.Domain.AppUserAggregate.AppUser", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("MySocailApp.Domain.AppUserAggregate.UserImage", "Image", b1 =>
                        {
                            b1.Property<int>("AppUserId")
                                .HasColumnType("int");

                            b1.Property<string>("BlobName")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("CreatedAt")
                                .HasColumnType("datetime2");

                            b1.HasKey("AppUserId");

                            b1.ToTable("AppUsers");

                            b1.WithOwner()
                                .HasForeignKey("AppUserId");
                        });

                    b.Navigation("Account");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("MySocailApp.Domain.AppUserAggregate.AppUserImage", b =>
                {
                    b.HasOne("MySocailApp.Domain.AppUserAggregate.AppUser", null)
                        .WithMany("Images")
                        .HasForeignKey("AppUserId");
                });

            modelBuilder.Entity("MySocailApp.Domain.AppUserAggregate.Block", b =>
                {
                    b.HasOne("MySocailApp.Domain.AppUserAggregate.AppUser", "Blocked")
                        .WithMany("Blockers")
                        .HasForeignKey("BlockedId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MySocailApp.Domain.AppUserAggregate.AppUser", "Blocker")
                        .WithMany("Blockeds")
                        .HasForeignKey("BlockerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Blocked");

                    b.Navigation("Blocker");
                });

            modelBuilder.Entity("MySocailApp.Domain.AppUserAggregate.Follow", b =>
                {
                    b.HasOne("MySocailApp.Domain.AppUserAggregate.AppUser", "Followed")
                        .WithMany("Followers")
                        .HasForeignKey("FollowedId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MySocailApp.Domain.AppUserAggregate.AppUser", "Follower")
                        .WithMany("Followeds")
                        .HasForeignKey("FollowerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Followed");

                    b.Navigation("Follower");
                });

            modelBuilder.Entity("MySocailApp.Domain.AppUserAggregate.FollowRequest", b =>
                {
                    b.HasOne("MySocailApp.Domain.AppUserAggregate.AppUser", "Requested")
                        .WithMany("Requesters")
                        .HasForeignKey("RequestedId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MySocailApp.Domain.AppUserAggregate.AppUser", "Requester")
                        .WithMany("Requesteds")
                        .HasForeignKey("RequesterId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Requested");

                    b.Navigation("Requester");
                });

            modelBuilder.Entity("MySocailApp.Domain.QuestionAggregate.Question", b =>
                {
                    b.HasOne("MySocailApp.Domain.AppUserAggregate.AppUser", "AppUser")
                        .WithMany("Questions")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MySocailApp.Domain.ExamAggregate.Exam", "Exam")
                        .WithMany("Quesitons")
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MySocailApp.Domain.SubjectAggregate.Subject", "Subject")
                        .WithMany("Quesitons")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Exam");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("MySocailApp.Domain.QuestionAggregate.QuestionImage", b =>
                {
                    b.HasOne("MySocailApp.Domain.QuestionAggregate.Question", null)
                        .WithMany("Images")
                        .HasForeignKey("QuestionId");

                    b.OwnsOne("MySocailApp.Domain.QuestionAggregate.Dimention", "Dimention", b1 =>
                        {
                            b1.Property<int>("QuestionImageId")
                                .HasColumnType("int");

                            b1.Property<float>("Height")
                                .HasColumnType("real");

                            b1.Property<float>("Width")
                                .HasColumnType("real");

                            b1.HasKey("QuestionImageId");

                            b1.ToTable("QuestionImage");

                            b1.WithOwner()
                                .HasForeignKey("QuestionImageId");
                        });

                    b.Navigation("Dimention")
                        .IsRequired();
                });

            modelBuilder.Entity("MySocailApp.Domain.QuestionAggregate.QuestionTopic", b =>
                {
                    b.HasOne("MySocailApp.Domain.QuestionAggregate.Question", "Question")
                        .WithMany("Topics")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MySocailApp.Domain.TopicAggregate.Topic", "Topic")
                        .WithMany("Questions")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("MySocailApp.Domain.QuestionAggregate.QuestionUserLike", b =>
                {
                    b.HasOne("MySocailApp.Domain.AppUserAggregate.AppUser", "AppUser")
                        .WithMany("QuestionsLiked")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MySocailApp.Domain.QuestionAggregate.Question", "Question")
                        .WithMany("Likes")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("MySocailApp.Domain.SubjectAggregate.Subject", b =>
                {
                    b.HasOne("MySocailApp.Domain.ExamAggregate.Exam", "Exam")
                        .WithMany("Subjects")
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exam");
                });

            modelBuilder.Entity("MySocailApp.Domain.TopicAggregate.Topic", b =>
                {
                    b.HasOne("MySocailApp.Domain.SubjectAggregate.Subject", "Subject")
                        .WithMany("Topics")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("MySocailApp.Domain.AccountAggregate.Account", b =>
                {
                    b.Navigation("AppUser")
                        .IsRequired();
                });

            modelBuilder.Entity("MySocailApp.Domain.AppUserAggregate.AppUser", b =>
                {
                    b.Navigation("Blockeds");

                    b.Navigation("Blockers");

                    b.Navigation("Followeds");

                    b.Navigation("Followers");

                    b.Navigation("Images");

                    b.Navigation("Questions");

                    b.Navigation("QuestionsLiked");

                    b.Navigation("Requesteds");

                    b.Navigation("Requesters");
                });

            modelBuilder.Entity("MySocailApp.Domain.ExamAggregate.Exam", b =>
                {
                    b.Navigation("Quesitons");

                    b.Navigation("Subjects");
                });

            modelBuilder.Entity("MySocailApp.Domain.QuestionAggregate.Question", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("Likes");

                    b.Navigation("Topics");
                });

            modelBuilder.Entity("MySocailApp.Domain.SubjectAggregate.Subject", b =>
                {
                    b.Navigation("Quesitons");

                    b.Navigation("Topics");
                });

            modelBuilder.Entity("MySocailApp.Domain.TopicAggregate.Topic", b =>
                {
                    b.Navigation("Questions");
                });
#pragma warning restore 612, 618
        }
    }
}
